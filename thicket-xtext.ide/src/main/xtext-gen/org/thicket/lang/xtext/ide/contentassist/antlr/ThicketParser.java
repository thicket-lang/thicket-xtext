/*
 * generated by Xtext 2.9.0.beta5
 */
package org.thicket.lang.xtext.ide.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.thicket.lang.xtext.services.ThicketGrammarAccess;

public class ThicketParser extends AbstractContentAssistParser {
	
	@Inject
	private ThicketGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.thicket.lang.xtext.ide.contentassist.antlr.internal.InternalThicketParser createParser() {
		org.thicket.lang.xtext.ide.contentassist.antlr.internal.InternalThicketParser result = new org.thicket.lang.xtext.ide.contentassist.antlr.internal.InternalThicketParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getImportsAccess().getAlternatives(), "rule__Imports__Alternatives");
					put(grammarAccess.getImportsAccess().getAlternatives_0_4(), "rule__Imports__Alternatives_0_4");
					put(grammarAccess.getEntityAccess().getAlternatives(), "rule__Entity__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getTypesAccess().getAlternatives_1_0(), "rule__Types__Alternatives_1_0");
					put(grammarAccess.getClassDefAccess().getAlternatives_5(), "rule__ClassDef__Alternatives_5");
					put(grammarAccess.getTraitDefAccess().getAlternatives_4(), "rule__TraitDef__Alternatives_4");
					put(grammarAccess.getSexprAccess().getAlternatives(), "rule__Sexpr__Alternatives");
					put(grammarAccess.getSexprAccess().getAlternatives_6_3(), "rule__Sexpr__Alternatives_6_3");
					put(grammarAccess.getIdentOrOpAccess().getAlternatives(), "rule__IdentOrOp__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_2(), "rule__Model__Group_2__0");
					put(grammarAccess.getImportsAccess().getGroup_0(), "rule__Imports__Group_0__0");
					put(grammarAccess.getImportsAccess().getGroup_0_2(), "rule__Imports__Group_0_2__0");
					put(grammarAccess.getImportsAccess().getGroup_0_4_1(), "rule__Imports__Group_0_4_1__0");
					put(grammarAccess.getImportsAccess().getGroup_0_4_1_1(), "rule__Imports__Group_0_4_1_1__0");
					put(grammarAccess.getImportsAccess().getGroup_1(), "rule__Imports__Group_1__0");
					put(grammarAccess.getImportsAccess().getGroup_1_2(), "rule__Imports__Group_1_2__0");
					put(grammarAccess.getTypeDefAccess().getGroup(), "rule__TypeDef__Group__0");
					put(grammarAccess.getSortDefAccess().getGroup(), "rule__SortDef__Group__0");
					put(grammarAccess.getSortDefAccess().getGroup_4(), "rule__SortDef__Group_4__0");
					put(grammarAccess.getSortDefAccess().getGroup_4_2(), "rule__SortDef__Group_4_2__0");
					put(grammarAccess.getObjectDefAccess().getGroup(), "rule__ObjectDef__Group__0");
					put(grammarAccess.getObjectDefAccess().getGroup_3(), "rule__ObjectDef__Group_3__0");
					put(grammarAccess.getTparamAccess().getGroup(), "rule__Tparam__Group__0");
					put(grammarAccess.getGenericsAccess().getGroup(), "rule__Generics__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
					put(grammarAccess.getTypeAccess().getGroup_0_1(), "rule__Type__Group_0_1__0");
					put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
					put(grammarAccess.getTypesAccess().getGroup(), "rule__Types__Group__0");
					put(grammarAccess.getTypesAccess().getGroup_1(), "rule__Types__Group_1__0");
					put(grammarAccess.getExpressionDefAccess().getGroup(), "rule__ExpressionDef__Group__0");
					put(grammarAccess.getExpressionDefAccess().getGroup_3(), "rule__ExpressionDef__Group_3__0");
					put(grammarAccess.getExpressionDefAccess().getGroup_5(), "rule__ExpressionDef__Group_5__0");
					put(grammarAccess.getExpressionDefAccess().getGroup_5_0(), "rule__ExpressionDef__Group_5_0__0");
					put(grammarAccess.getExpressionDefAccess().getGroup_5_0_1(), "rule__ExpressionDef__Group_5_0_1__0");
					put(grammarAccess.getClassDefAccess().getGroup(), "rule__ClassDef__Group__0");
					put(grammarAccess.getClassDefAccess().getGroup_5_0(), "rule__ClassDef__Group_5_0__0");
					put(grammarAccess.getTraitDefAccess().getGroup(), "rule__TraitDef__Group__0");
					put(grammarAccess.getTraitDefAccess().getGroup_4_0(), "rule__TraitDef__Group_4_0__0");
					put(grammarAccess.getMethodClassAccess().getGroup(), "rule__MethodClass__Group__0");
					put(grammarAccess.getMethodClassAccess().getGroup_1(), "rule__MethodClass__Group_1__0");
					put(grammarAccess.getMethodTraitAccess().getGroup(), "rule__MethodTrait__Group__0");
					put(grammarAccess.getExprAccess().getGroup(), "rule__Expr__Group__0");
					put(grammarAccess.getExprAccess().getGroup_1(), "rule__Expr__Group_1__0");
					put(grammarAccess.getIexprAccess().getGroup(), "rule__Iexpr__Group__0");
					put(grammarAccess.getIexprAccess().getGroup_1(), "rule__Iexpr__Group_1__0");
					put(grammarAccess.getSexprAccess().getGroup_4(), "rule__Sexpr__Group_4__0");
					put(grammarAccess.getSexprAccess().getGroup_5(), "rule__Sexpr__Group_5__0");
					put(grammarAccess.getSexprAccess().getGroup_6(), "rule__Sexpr__Group_6__0");
					put(grammarAccess.getSexprAccess().getGroup_6_3_0(), "rule__Sexpr__Group_6_3_0__0");
					put(grammarAccess.getSexprAccess().getGroup_7(), "rule__Sexpr__Group_7__0");
					put(grammarAccess.getSexprAccess().getGroup_7_1(), "rule__Sexpr__Group_7_1__0");
					put(grammarAccess.getSexprAccess().getGroup_7_2(), "rule__Sexpr__Group_7_2__0");
					put(grammarAccess.getSexprAccess().getGroup_8(), "rule__Sexpr__Group_8__0");
					put(grammarAccess.getSexprAccess().getGroup_8_2(), "rule__Sexpr__Group_8_2__0");
					put(grammarAccess.getSexprAccess().getGroup_9(), "rule__Sexpr__Group_9__0");
					put(grammarAccess.getSexprAccess().getGroup_9_3(), "rule__Sexpr__Group_9_3__0");
					put(grammarAccess.getAttrAccess().getGroup(), "rule__Attr__Group__0");
					put(grammarAccess.getIdentOrOpAccess().getGroup_1(), "rule__IdentOrOp__Group_1__0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getNamesAssignment_2_1(), "rule__Model__NamesAssignment_2_1");
					put(grammarAccess.getModelAccess().getImportsAssignment_3(), "rule__Model__ImportsAssignment_3");
					put(grammarAccess.getModelAccess().getEntitiesAssignment_4(), "rule__Model__EntitiesAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.thicket.lang.xtext.ide.contentassist.antlr.internal.InternalThicketParser typedParser = (org.thicket.lang.xtext.ide.contentassist.antlr.internal.InternalThicketParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ThicketGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ThicketGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
